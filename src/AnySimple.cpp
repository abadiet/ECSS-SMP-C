/**
 * This file was auto-generated by https://github.com/abadiet/CWraPPer/
 */
#include "Smp-C/AnySimple.h"
#include <Smp/AnySimple.h>

#ifdef __cplusplus
extern "C" {
#endif /* __cplusplus */


/* ### root ### */
#define CW_SPACE CW_root

#undef CW_SPACE


/* ### Smp ### */
#define CW_SPACE CW_root_Smp

#undef CW_SPACE


/* ### Smp::AnySimple ### */
#define CW_SPACE CW_root_Smp_AnySimple

/* Error while processing function "AnySimple" at Smp/./AnySimple.h:34:9 (exported to Smp-C/AnySimple.h) : Skipping constructor */

/* Error while processing function "AnySimple" at Smp/./AnySimple.h:38:18 (exported to Smp-C/AnySimple.h) : Skipping constructor */

/* Error while processing function "AnySimple" at Smp/./AnySimple.h:43:9 (exported to Smp-C/AnySimple.h) : Skipping templated function */

/* Error while processing function "AnySimple" at Smp/./AnySimple.h:52:9 (exported to Smp-C/AnySimple.h) : Skipping constructor */

/* Error while processing function "AnySimple" at Smp/./AnySimple.h:57:9 (exported to Smp-C/AnySimple.h) : Skipping constructor */

/* Error while processing function "operator=" at Smp/./AnySimple.h:63:20 (exported to Smp-C/AnySimple.h) : Reference type is not supported: AnySimple & */

/* Error while processing function "operator=" at Smp/./AnySimple.h:69:20 (exported to Smp-C/AnySimple.h) : Reference type is not supported: AnySimple & */

void
CW(_AnySimple)
(
    CW() * self
) {
    static_cast<Smp::AnySimple *>(self)->~AnySimple(
    );
}

/*
void
CW(SetValue)
(
    CW() * self,
    CW(CW_root_Smp, PrimitiveTypeKind) kind,
    CW(CW_root_Smp, Bool) value
) {
    static_cast<Smp::AnySimple *>(self)->SetValue(
        static_cast<Smp::PrimitiveTypeKind>(kind),
        static_cast<Smp::Bool>(value)
    );
}

void
CW(SetValue)
(
    CW() * self,
    CW(CW_root_Smp, PrimitiveTypeKind) kind,
    CW(CW_root_Smp, Char8) value
) {
    static_cast<Smp::AnySimple *>(self)->SetValue(
        static_cast<Smp::PrimitiveTypeKind>(kind),
        static_cast<Smp::Char8>(value)
    );
}

void
CW(SetValue)
(
    CW() * self,
    CW(CW_root_Smp, PrimitiveTypeKind) kind,
    CW(CW_root_Smp, String8) value
) {
    static_cast<Smp::AnySimple *>(self)->SetValue(
        static_cast<Smp::PrimitiveTypeKind>(kind),
        static_cast<Smp::String8>(value)
    );
}

void
CW(SetValue)
(
    CW() * self,
    CW(CW_root_Smp, PrimitiveTypeKind) kind,
    CW(CW_root_Smp, UInt8) value
) {
    static_cast<Smp::AnySimple *>(self)->SetValue(
        static_cast<Smp::PrimitiveTypeKind>(kind),
        static_cast<Smp::UInt8>(value)
    );
}

void
CW(SetValue)
(
    CW() * self,
    CW(CW_root_Smp, PrimitiveTypeKind) kind,
    CW(CW_root_Smp, UInt16) value
) {
    static_cast<Smp::AnySimple *>(self)->SetValue(
        static_cast<Smp::PrimitiveTypeKind>(kind),
        static_cast<Smp::UInt16>(value)
    );
}

void
CW(SetValue)
(
    CW() * self,
    CW(CW_root_Smp, PrimitiveTypeKind) kind,
    CW(CW_root_Smp, UInt32) value
) {
    static_cast<Smp::AnySimple *>(self)->SetValue(
        static_cast<Smp::PrimitiveTypeKind>(kind),
        static_cast<Smp::UInt32>(value)
    );
}

void
CW(SetValue)
(
    CW() * self,
    CW(CW_root_Smp, PrimitiveTypeKind) kind,
    CW(CW_root_Smp, UInt64) value
) {
    static_cast<Smp::AnySimple *>(self)->SetValue(
        static_cast<Smp::PrimitiveTypeKind>(kind),
        static_cast<Smp::UInt64>(value)
    );
}

void
CW(SetValue)
(
    CW() * self,
    CW(CW_root_Smp, PrimitiveTypeKind) kind,
    CW(CW_root_Smp, Int8) value
) {
    static_cast<Smp::AnySimple *>(self)->SetValue(
        static_cast<Smp::PrimitiveTypeKind>(kind),
        static_cast<Smp::Int8>(value)
    );
}

void
CW(SetValue)
(
    CW() * self,
    CW(CW_root_Smp, PrimitiveTypeKind) kind,
    CW(CW_root_Smp, Int16) value
) {
    static_cast<Smp::AnySimple *>(self)->SetValue(
        static_cast<Smp::PrimitiveTypeKind>(kind),
        static_cast<Smp::Int16>(value)
    );
}

void
CW(SetValue)
(
    CW() * self,
    CW(CW_root_Smp, PrimitiveTypeKind) kind,
    CW(CW_root_Smp, Int32) value
) {
    static_cast<Smp::AnySimple *>(self)->SetValue(
        static_cast<Smp::PrimitiveTypeKind>(kind),
        static_cast<Smp::Int32>(value)
    );
}

void
CW(SetValue)
(
    CW() * self,
    CW(CW_root_Smp, PrimitiveTypeKind) kind,
    CW(CW_root_Smp, Int64) value
) {
    static_cast<Smp::AnySimple *>(self)->SetValue(
        static_cast<Smp::PrimitiveTypeKind>(kind),
        static_cast<Smp::Int64>(value)
    );
}

void
CW(SetValue)
(
    CW() * self,
    CW(CW_root_Smp, PrimitiveTypeKind) kind,
    CW(CW_root_Smp, Float32) value
) {
    static_cast<Smp::AnySimple *>(self)->SetValue(
        static_cast<Smp::PrimitiveTypeKind>(kind),
        static_cast<Smp::Float32>(value)
    );
}

void
CW(SetValue)
(
    CW() * self,
    CW(CW_root_Smp, PrimitiveTypeKind) kind,
    CW(CW_root_Smp, Float64) value
) {
    static_cast<Smp::AnySimple *>(self)->SetValue(
        static_cast<Smp::PrimitiveTypeKind>(kind),
        static_cast<Smp::Float64>(value)
    );
}
*/

/*
CW(CW_root_Smp, Bool)
CW(operator bool)
(
    CW() * self
) {
    return static_cast<CW(CW_root_Smp, Bool)>(
    static_cast<Smp::AnySimple *>(self)->operator bool(
    ));
}

CW(CW_root_Smp, Char8)
CW(operator char)
(
    CW() * self
) {
    return static_cast<CW(CW_root_Smp, Char8)>(
    static_cast<Smp::AnySimple *>(self)->operator char(
    ));
}

CW(CW_root_Smp, String8)
CW(operator const char *)
(
    CW() * self
) {
    return static_cast<CW(CW_root_Smp, String8)>(
    static_cast<Smp::AnySimple *>(self)->operator const char *(
    ));
}

CW(CW_root_Smp, UInt8)
CW(operator unsigned char)
(
    CW() * self
) {
    return static_cast<CW(CW_root_Smp, UInt8)>(
    static_cast<Smp::AnySimple *>(self)->operator unsigned char(
    ));
}

CW(CW_root_Smp, UInt16)
CW(operator unsigned short)
(
    CW() * self
) {
    return static_cast<CW(CW_root_Smp, UInt16)>(
    static_cast<Smp::AnySimple *>(self)->operator unsigned short(
    ));
}

CW(CW_root_Smp, UInt32)
CW(operator unsigned int)
(
    CW() * self
) {
    return static_cast<CW(CW_root_Smp, UInt32)>(
    static_cast<Smp::AnySimple *>(self)->operator unsigned int(
    ));
}

CW(CW_root_Smp, UInt64)
CW(operator unsigned long long)
(
    CW() * self
) {
    return static_cast<CW(CW_root_Smp, UInt64)>(
    static_cast<Smp::AnySimple *>(self)->operator unsigned long long(
    ));
}

CW(CW_root_Smp, Int8)
CW(operator signed char)
(
    CW() * self
) {
    return static_cast<CW(CW_root_Smp, Int8)>(
    static_cast<Smp::AnySimple *>(self)->operator signed char(
    ));
}

CW(CW_root_Smp, Int16)
CW(operator short)
(
    CW() * self
) {
    return static_cast<CW(CW_root_Smp, Int16)>(
    static_cast<Smp::AnySimple *>(self)->operator short(
    ));
}

CW(CW_root_Smp, Int32)
CW(operator int)
(
    CW() * self
) {
    return static_cast<CW(CW_root_Smp, Int32)>(
    static_cast<Smp::AnySimple *>(self)->operator int(
    ));
}

CW(CW_root_Smp, Int64)
CW(operator long long)
(
    CW() * self
) {
    return static_cast<CW(CW_root_Smp, Int64)>(
    static_cast<Smp::AnySimple *>(self)->operator long long(
    ));
}

CW(CW_root_Smp, Float32)
CW(operator float)
(
    CW() * self
) {
    return static_cast<CW(CW_root_Smp, Float32)>(
    static_cast<Smp::AnySimple *>(self)->operator float(
    ));
}

CW(CW_root_Smp, Float64)
CW(operator double)
(
    CW() * self
) {
    return static_cast<CW(CW_root_Smp, Float64)>(
    static_cast<Smp::AnySimple *>(self)->operator double(
    ));
}
*/

CW(CW_root_Smp, String8)
CW(MoveString)
(
    CW() * self
) {
    return static_cast<CW(CW_root_Smp, String8)>(
    static_cast<Smp::AnySimple *>(self)->MoveString(
    ));
}

CW(CW_root_Smp, PrimitiveTypeKind)
CW(GetType)
(
    CW() * self
) {
    return static_cast<CW(CW_root_Smp, PrimitiveTypeKind)>(
    static_cast<Smp::AnySimple *>(self)->GetType(
    ));
}

/* Error while processing function "operator==" at Smp/./AnySimple.h:216:14 (exported to Smp-C/AnySimple.h) : Reference type is not supported: const Smp::AnySimple & */

/* Error while processing function "operator!=" at Smp/./AnySimple.h:222:14 (exported to Smp-C/AnySimple.h) : Reference type is not supported: const Smp::AnySimple & */

#undef CW_SPACE


/* ### Smp ### */
#define CW_SPACE CW_root_Smp

/* Error while processing function "operator<<" at Smp/./AnySimple.h:285:19 (exported to Smp-C/AnySimple.h) : Reference type is not supported: std::ostream & */

#undef CW_SPACE


#ifdef __cplusplus
}
#endif /* __cplusplus */
