/**
 * This file was auto-generated by https://github.com/abadiet/CWraPPer/
 */
#ifndef CWRAPPER_IPUBLISHFIELD_H
#define CWRAPPER_IPUBLISHFIELD_H

#include "../CWraPPer.h"

#ifdef __cplusplus
extern "C" {
#endif /* __cplusplus */


#include "Smp-C/DuplicateName.h"
#include "Smp-C/FieldCollection.h"
#include "Smp-C/InvalidObjectName.h"
#include "Smp-C/InvalidType.h"
#include "Smp-C/PrimitiveTypes.h"
#include "Smp-C/Publication/TypeNotRegistered.h"
#include "Smp-C/Uuid.h"
#include "Smp-C/ViewKind.h"
#include "Smp-C/Void.h"


/* ### root ### */
#define CW_SPACE CW_root

#undef CW_SPACE


/* ### Smp ### */
#ifndef CW_root_Smp
#define CW_root_Smp CW_BUILD_SPACE(CW_root, Smp)
#endif /* CW_root_Smp */
#define CW_SPACE CW_root_Smp

typedef void CW(IField);

typedef void CW(ISimpleArrayField);

#undef CW_SPACE


/* ### Smp::Publication ### */
#ifndef CW_root_Smp_Publication
#define CW_root_Smp_Publication CW_BUILD_SPACE(CW_root_Smp, Publication)
#endif /* CW_root_Smp_Publication */
#define CW_SPACE CW_root_Smp_Publication

typedef void CW(IPublishField);

#undef CW_SPACE


/* ### Smp::Publication::IPublishField ### */
#ifndef CW_root_Smp_Publication_IPublishField
#define CW_root_Smp_Publication_IPublishField CW_BUILD_SPACE(CW_root_Smp_Publication, IPublishField)
#endif /* CW_root_Smp_Publication_IPublishField */
#define CW_SPACE CW_root_Smp_Publication_IPublishField

void
CW(_IPublishField)
(
    CW() * self
);

/*
CW(CW_root_Smp, IField) *
CW(PublishField)
(
    CW() * self,
    CW(CW_root_Smp, String8) name,
    CW(CW_root_Smp, String8) description,
    CW(CW_root_Smp, Bool) * address,
    CW(CW_root_Smp, ViewKind) view,
    CW(CW_root_Smp, Bool) state,
    CW(CW_root_Smp, Bool) input,
    CW(CW_root_Smp, Bool) output
);

CW(CW_root_Smp, IField) *
CW(PublishField)
(
    CW() * self,
    CW(CW_root_Smp, String8) name,
    CW(CW_root_Smp, String8) description,
    CW(CW_root_Smp, Char8) * address,
    CW(CW_root_Smp, ViewKind) view,
    CW(CW_root_Smp, Bool) state,
    CW(CW_root_Smp, Bool) input,
    CW(CW_root_Smp, Bool) output
);

CW(CW_root_Smp, IField) *
CW(PublishField)
(
    CW() * self,
    CW(CW_root_Smp, String8) name,
    CW(CW_root_Smp, String8) description,
    CW(CW_root_Smp, Int8) * address,
    CW(CW_root_Smp, ViewKind) view,
    CW(CW_root_Smp, Bool) state,
    CW(CW_root_Smp, Bool) input,
    CW(CW_root_Smp, Bool) output
);

CW(CW_root_Smp, IField) *
CW(PublishField)
(
    CW() * self,
    CW(CW_root_Smp, String8) name,
    CW(CW_root_Smp, String8) description,
    CW(CW_root_Smp, Int16) * address,
    CW(CW_root_Smp, ViewKind) view,
    CW(CW_root_Smp, Bool) state,
    CW(CW_root_Smp, Bool) input,
    CW(CW_root_Smp, Bool) output
);

CW(CW_root_Smp, IField) *
CW(PublishField)
(
    CW() * self,
    CW(CW_root_Smp, String8) name,
    CW(CW_root_Smp, String8) description,
    CW(CW_root_Smp, Int32) * address,
    CW(CW_root_Smp, ViewKind) view,
    CW(CW_root_Smp, Bool) state,
    CW(CW_root_Smp, Bool) input,
    CW(CW_root_Smp, Bool) output
);

CW(CW_root_Smp, IField) *
CW(PublishField)
(
    CW() * self,
    CW(CW_root_Smp, String8) name,
    CW(CW_root_Smp, String8) description,
    CW(CW_root_Smp, Int64) * address,
    CW(CW_root_Smp, ViewKind) view,
    CW(CW_root_Smp, Bool) state,
    CW(CW_root_Smp, Bool) input,
    CW(CW_root_Smp, Bool) output
);

CW(CW_root_Smp, IField) *
CW(PublishField)
(
    CW() * self,
    CW(CW_root_Smp, String8) name,
    CW(CW_root_Smp, String8) description,
    CW(CW_root_Smp, UInt8) * address,
    CW(CW_root_Smp, ViewKind) view,
    CW(CW_root_Smp, Bool) state,
    CW(CW_root_Smp, Bool) input,
    CW(CW_root_Smp, Bool) output
);

CW(CW_root_Smp, IField) *
CW(PublishField)
(
    CW() * self,
    CW(CW_root_Smp, String8) name,
    CW(CW_root_Smp, String8) description,
    CW(CW_root_Smp, UInt16) * address,
    CW(CW_root_Smp, ViewKind) view,
    CW(CW_root_Smp, Bool) state,
    CW(CW_root_Smp, Bool) input,
    CW(CW_root_Smp, Bool) output
);

CW(CW_root_Smp, IField) *
CW(PublishField)
(
    CW() * self,
    CW(CW_root_Smp, String8) name,
    CW(CW_root_Smp, String8) description,
    CW(CW_root_Smp, UInt32) * address,
    CW(CW_root_Smp, ViewKind) view,
    CW(CW_root_Smp, Bool) state,
    CW(CW_root_Smp, Bool) input,
    CW(CW_root_Smp, Bool) output
);

CW(CW_root_Smp, IField) *
CW(PublishField)
(
    CW() * self,
    CW(CW_root_Smp, String8) name,
    CW(CW_root_Smp, String8) description,
    CW(CW_root_Smp, UInt64) * address,
    CW(CW_root_Smp, ViewKind) view,
    CW(CW_root_Smp, Bool) state,
    CW(CW_root_Smp, Bool) input,
    CW(CW_root_Smp, Bool) output
);

CW(CW_root_Smp, IField) *
CW(PublishField)
(
    CW() * self,
    CW(CW_root_Smp, String8) name,
    CW(CW_root_Smp, String8) description,
    CW(CW_root_Smp, Float32) * address,
    CW(CW_root_Smp, ViewKind) view,
    CW(CW_root_Smp, Bool) state,
    CW(CW_root_Smp, Bool) input,
    CW(CW_root_Smp, Bool) output
);

CW(CW_root_Smp, IField) *
CW(PublishField)
(
    CW() * self,
    CW(CW_root_Smp, String8) name,
    CW(CW_root_Smp, String8) description,
    CW(CW_root_Smp, Float64) * address,
    CW(CW_root_Smp, ViewKind) view,
    CW(CW_root_Smp, Bool) state,
    CW(CW_root_Smp, Bool) input,
    CW(CW_root_Smp, Bool) output
);

CW(CW_root_Smp, IField) *
CW(PublishField)
(
    CW() * self,
    CW(CW_root_Smp, String8) name,
    CW(CW_root_Smp, String8) description,
    CW(CW_root_Smp, Void) * address,
    CW(CW_root_Smp, Uuid) * typeUuid,
    CW(CW_root_Smp, ViewKind) view,
    CW(CW_root_Smp, Bool) state,
    CW(CW_root_Smp, Bool) input,
    CW(CW_root_Smp, Bool) output
);

void
CW(PublishField)
(
    CW() * self,
    CW(CW_root_Smp, IField) * field
);
*/

/*
CW(CW_root_Smp_Publication, IPublishField) *
CW(PublishArray)
(
    CW() * self,
    CW(CW_root_Smp, String8) name,
    CW(CW_root_Smp, String8) description,
    CW(CW_root_Smp, ViewKind) view,
    CW(CW_root_Smp, Bool) state
);

CW(CW_root_Smp, ISimpleArrayField) *
CW(PublishArray)
(
    CW() * self,
    CW(CW_root_Smp, String8) name,
    CW(CW_root_Smp, String8) description,
    CW(CW_root_Smp, Int64) count,
    CW(CW_root_Smp, Void) * address,
    CW(CW_root_Smp, PrimitiveTypeKind) type,
    CW(CW_root_Smp, ViewKind) view,
    CW(CW_root_Smp, Bool) state,
    CW(CW_root_Smp, Bool) input,
    CW(CW_root_Smp, Bool) output
);
*/

CW(CW_root_Smp_Publication, IPublishField) *
CW(PublishStructure)
(
    CW() * self,
    CW(CW_root_Smp, String8) name,
    CW(CW_root_Smp, String8) description,
    CW(CW_root_Smp, ViewKind) view,
    CW(CW_root_Smp, Bool) state
);

CW(CW_root_Smp, IField) *
CW(GetField)
(
    CW() * self,
    CW(CW_root_Smp, String8) fullName
);

const CW(CW_root_Smp, FieldCollection) *
CW(GetFields)
(
    CW() * self
);

/* Error while processing function "operator=" at Smp/Publication/IPublishField.h:54:15 (exported to Smp-C/Publication/IPublishField.h) : Reference type is not supported: IPublishField & */

#undef CW_SPACE


#ifdef __cplusplus
}
#endif /* __cplusplus */

#endif /* CWRAPPER_IPUBLISHFIELD_H */
