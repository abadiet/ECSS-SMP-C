/**
 * This file was auto-generated by https://github.com/abadiet/CWraPPer/
 */
#include "Smp-C/ISimulator.h"
#include <Smp/ISimulator.h>

#ifdef __cplusplus
extern "C" {
#endif /* __cplusplus */


/* ### root ### */
#define CW_SPACE CW_root

#undef CW_SPACE


/* ### Smp ### */
#define CW_SPACE CW_root_Smp

#undef CW_SPACE


/* ### Smp::Publication ### */
#define CW_SPACE CW_root_Smp_Publication

#undef CW_SPACE


/* ### Smp::Services ### */
#define CW_SPACE CW_root_Smp_Services

#undef CW_SPACE


/* ### Smp ### */
#define CW_SPACE CW_root_Smp

#undef CW_SPACE


/* ### Smp::ISimulator ### */
#define CW_SPACE CW_root_Smp_ISimulator

void
CW(_ISimulator)
(
    CW() * self
) {
    static_cast<Smp::ISimulator *>(self)->~ISimulator(
    );
}

void
CW(Initialise)
(
    CW() * self
) {
    static_cast<Smp::ISimulator *>(self)->Initialise(
    );
}

void
CW(Publish)
(
    CW() * self
) {
    static_cast<Smp::ISimulator *>(self)->Publish(
    );
}

void
CW(Configure)
(
    CW() * self
) {
    static_cast<Smp::ISimulator *>(self)->Configure(
    );
}

void
CW(Connect)
(
    CW() * self
) {
    static_cast<Smp::ISimulator *>(self)->Connect(
    );
}

void
CW(Run)
(
    CW() * self
) {
    static_cast<Smp::ISimulator *>(self)->Run(
    );
}

void
CW(Hold)
(
    CW() * self,
    CW(CW_root_Smp, Bool) immediate
) {
    static_cast<Smp::ISimulator *>(self)->Hold(
        static_cast<Smp::Bool>(immediate)
    );
}

void
CW(Store)
(
    CW() * self,
    CW(CW_root_Smp, String8) filename
) {
    static_cast<Smp::ISimulator *>(self)->Store(
        static_cast<Smp::String8>(filename)
    );
}

void
CW(Restore)
(
    CW() * self,
    CW(CW_root_Smp, String8) filename
) {
    static_cast<Smp::ISimulator *>(self)->Restore(
        static_cast<Smp::String8>(filename)
    );
}

void
CW(Reconnect)
(
    CW() * self,
    CW(CW_root_Smp, IComponent) * root
) {
    static_cast<Smp::ISimulator *>(self)->Reconnect(
        static_cast<Smp::IComponent *>(root)
    );
}

void
CW(Exit)
(
    CW() * self
) {
    static_cast<Smp::ISimulator *>(self)->Exit(
    );
}

void
CW(Abort)
(
    CW() * self
) {
    static_cast<Smp::ISimulator *>(self)->Abort(
    );
}

CW(CW_root_Smp, SimulatorStateKind)
CW(GetState)
(
    CW() * self
) {
    return static_cast<CW(CW_root_Smp, SimulatorStateKind)>(
    static_cast<Smp::ISimulator *>(self)->GetState(
    ));
}

void
CW(AddInitEntryPoint)
(
    CW() * self,
    CW(CW_root_Smp, IEntryPoint) * entryPoint
) {
    static_cast<Smp::ISimulator *>(self)->AddInitEntryPoint(
        static_cast<Smp::IEntryPoint *>(entryPoint)
    );
}

void
CW(AddModel)
(
    CW() * self,
    CW(CW_root_Smp, IModel) * model
) {
    static_cast<Smp::ISimulator *>(self)->AddModel(
        static_cast<Smp::IModel *>(model)
    );
}

void
CW(AddService)
(
    CW() * self,
    CW(CW_root_Smp, IService) * service
) {
    static_cast<Smp::ISimulator *>(self)->AddService(
        static_cast<Smp::IService *>(service)
    );
}

CW(CW_root_Smp, IService) *
CW(GetService)
(
    CW() * self,
    CW(CW_root_Smp, String8) name
) {
    return static_cast<CW(CW_root_Smp, IService) *>(
    static_cast<Smp::ISimulator *>(self)->GetService(
        static_cast<Smp::String8>(name)
    ));
}

CW(CW_root_Smp_Services, ILogger) *
CW(GetLogger)
(
    CW() * self
) {
    return static_cast<CW(CW_root_Smp_Services, ILogger) *>(
    static_cast<Smp::ISimulator *>(self)->GetLogger(
    ));
}

CW(CW_root_Smp_Services, ITimeKeeper) *
CW(GetTimeKeeper)
(
    CW() * self
) {
    return static_cast<CW(CW_root_Smp_Services, ITimeKeeper) *>(
    static_cast<Smp::ISimulator *>(self)->GetTimeKeeper(
    ));
}

CW(CW_root_Smp_Services, IScheduler) *
CW(GetScheduler)
(
    CW() * self
) {
    return static_cast<CW(CW_root_Smp_Services, IScheduler) *>(
    static_cast<Smp::ISimulator *>(self)->GetScheduler(
    ));
}

CW(CW_root_Smp_Services, IEventManager) *
CW(GetEventManager)
(
    CW() * self
) {
    return static_cast<CW(CW_root_Smp_Services, IEventManager) *>(
    static_cast<Smp::ISimulator *>(self)->GetEventManager(
    ));
}

CW(CW_root_Smp_Services, IResolver) *
CW(GetResolver)
(
    CW() * self
) {
    return static_cast<CW(CW_root_Smp_Services, IResolver) *>(
    static_cast<Smp::ISimulator *>(self)->GetResolver(
    ));
}

CW(CW_root_Smp_Services, ILinkRegistry) *
CW(GetLinkRegistry)
(
    CW() * self
) {
    return static_cast<CW(CW_root_Smp_Services, ILinkRegistry) *>(
    static_cast<Smp::ISimulator *>(self)->GetLinkRegistry(
    ));
}

void
CW(RegisterFactory)
(
    CW() * self,
    CW(CW_root_Smp, IFactory) * componentFactory
) {
    static_cast<Smp::ISimulator *>(self)->RegisterFactory(
        static_cast<Smp::IFactory *>(componentFactory)
    );
}

CW(CW_root_Smp, IComponent) *
CW(CreateInstance)
(
    CW() * self,
    CW(CW_root_Smp, Uuid) * uuid,
    CW(CW_root_Smp, String8) name,
    CW(CW_root_Smp, String8) description,
    CW(CW_root_Smp, IComposite) * parent
) {
    return static_cast<CW(CW_root_Smp, IComponent) *>(
    static_cast<Smp::ISimulator *>(self)->CreateInstance(
        *static_cast<Smp::Uuid*>(uuid),
        static_cast<Smp::String8>(name),
        static_cast<Smp::String8>(description),
        static_cast<Smp::IComposite *>(parent)
    ));
}

CW(CW_root_Smp, IFactory) *
CW(GetFactory)
(
    CW() * self,
    CW(CW_root_Smp, Uuid) * uuid
) {
    return static_cast<CW(CW_root_Smp, IFactory) *>(
    static_cast<Smp::ISimulator *>(self)->GetFactory(
        *static_cast<Smp::Uuid*>(uuid)
    ));
}

const CW(CW_root_Smp, FactoryCollection) *
CW(GetFactories)
(
    CW() * self
) {
    return static_cast<const CW(CW_root_Smp, FactoryCollection) *>(
    static_cast<Smp::ISimulator *>(self)->GetFactories(
    ));
}

CW(CW_root_Smp_Publication, ITypeRegistry) *
CW(GetTypeRegistry)
(
    CW() * self
) {
    return static_cast<CW(CW_root_Smp_Publication, ITypeRegistry) *>(
    static_cast<Smp::ISimulator *>(self)->GetTypeRegistry(
    ));
}

void
CW(LoadLibrary)
(
    CW() * self,
    CW(CW_root_Smp, String8) libraryPath,
    CW(CW_root_Smp, LibraryLoadingFlag) flag
) {
    static_cast<Smp::ISimulator *>(self)->LoadLibrary(
        static_cast<Smp::String8>(libraryPath),
        static_cast<Smp::LibraryLoadingFlag>(flag)
    );
}

/* Error while processing function "ISimulator" at Smp/./ISimulator.h:71:11 (exported to Smp-C/ISimulator.h) : Skipping constructor */

/* Error while processing function "operator=" at Smp/./ISimulator.h:71:11 (exported to Smp-C/ISimulator.h) : Reference type is not supported: ISimulator & */

#undef CW_SPACE


#ifdef __cplusplus
}
#endif /* __cplusplus */
