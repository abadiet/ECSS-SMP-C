/**
 * This file was auto-generated by https://github.com/abadiet/CWraPPer/
 */
#include "Smp-C/Services/IScheduler.h"
#include <Smp/Services/IScheduler.h>

#ifdef __cplusplus
extern "C" {
#endif /* __cplusplus */


/* ### root ### */
#define CW_SPACE CW_root

#undef CW_SPACE


/* ### Smp ### */
#define CW_SPACE CW_root_Smp

#undef CW_SPACE


/* ### Smp::Services ### */
#define CW_SPACE CW_root_Smp_Services

#undef CW_SPACE


/* ### Smp::Services::IScheduler ### */
#define CW_SPACE CW_root_Smp_Services_IScheduler

void
CW(_IScheduler)
(
    CW() * self
) {
    static_cast<Smp::Services::IScheduler *>(self)->~IScheduler(
    );
}

CW(CW_root_Smp_Services, EventId)
CW(AddImmediateEvent)
(
    CW() * self,
    const CW(CW_root_Smp, IEntryPoint) * entryPoint
) {
    return static_cast<CW(CW_root_Smp_Services, EventId)>(
    static_cast<Smp::Services::IScheduler *>(self)->AddImmediateEvent(
        static_cast<const Smp::IEntryPoint *>(entryPoint)
    ));
}

CW(CW_root_Smp_Services, EventId)
CW(AddSimulationTimeEvent)
(
    CW() * self,
    const CW(CW_root_Smp, IEntryPoint) * entryPoint,
    CW(CW_root_Smp, Duration) simulationTime,
    CW(CW_root_Smp, Duration) cycleTime,
    CW(CW_root_Smp, Int64) repeat
) {
    return static_cast<CW(CW_root_Smp_Services, EventId)>(
    static_cast<Smp::Services::IScheduler *>(self)->AddSimulationTimeEvent(
        static_cast<const Smp::IEntryPoint *>(entryPoint),
        static_cast<Smp::Duration>(simulationTime),
        static_cast<Smp::Duration>(cycleTime),
        static_cast<Smp::Int64>(repeat)
    ));
}

CW(CW_root_Smp_Services, EventId)
CW(AddMissionTimeEvent)
(
    CW() * self,
    const CW(CW_root_Smp, IEntryPoint) * entryPoint,
    CW(CW_root_Smp, Duration) missionTime,
    CW(CW_root_Smp, Duration) cycleTime,
    CW(CW_root_Smp, Int64) repeat
) {
    return static_cast<CW(CW_root_Smp_Services, EventId)>(
    static_cast<Smp::Services::IScheduler *>(self)->AddMissionTimeEvent(
        static_cast<const Smp::IEntryPoint *>(entryPoint),
        static_cast<Smp::Duration>(missionTime),
        static_cast<Smp::Duration>(cycleTime),
        static_cast<Smp::Int64>(repeat)
    ));
}

CW(CW_root_Smp_Services, EventId)
CW(AddEpochTimeEvent)
(
    CW() * self,
    const CW(CW_root_Smp, IEntryPoint) * entryPoint,
    CW(CW_root_Smp, DateTime) epochTime,
    CW(CW_root_Smp, Duration) cycleTime,
    CW(CW_root_Smp, Int64) repeat
) {
    return static_cast<CW(CW_root_Smp_Services, EventId)>(
    static_cast<Smp::Services::IScheduler *>(self)->AddEpochTimeEvent(
        static_cast<const Smp::IEntryPoint *>(entryPoint),
        static_cast<Smp::DateTime>(epochTime),
        static_cast<Smp::Duration>(cycleTime),
        static_cast<Smp::Int64>(repeat)
    ));
}

CW(CW_root_Smp_Services, EventId)
CW(AddZuluTimeEvent)
(
    CW() * self,
    const CW(CW_root_Smp, IEntryPoint) * entryPoint,
    CW(CW_root_Smp, DateTime) zuluTime,
    CW(CW_root_Smp, Duration) cycleTime,
    CW(CW_root_Smp, Int64) repeat
) {
    return static_cast<CW(CW_root_Smp_Services, EventId)>(
    static_cast<Smp::Services::IScheduler *>(self)->AddZuluTimeEvent(
        static_cast<const Smp::IEntryPoint *>(entryPoint),
        static_cast<Smp::DateTime>(zuluTime),
        static_cast<Smp::Duration>(cycleTime),
        static_cast<Smp::Int64>(repeat)
    ));
}

CW(CW_root_Smp_Services, EventId)
CW(AddRelativeZuluTimeEvent)
(
    CW() * self,
    const CW(CW_root_Smp, IEntryPoint) * entryPoint,
    CW(CW_root_Smp, Duration) zuluTimeDelay,
    CW(CW_root_Smp, Duration) cycleTime,
    CW(CW_root_Smp, Int64) repeat
) {
    return static_cast<CW(CW_root_Smp_Services, EventId)>(
    static_cast<Smp::Services::IScheduler *>(self)->AddRelativeZuluTimeEvent(
        static_cast<const Smp::IEntryPoint *>(entryPoint),
        static_cast<Smp::Duration>(zuluTimeDelay),
        static_cast<Smp::Duration>(cycleTime),
        static_cast<Smp::Int64>(repeat)
    ));
}

void
CW(SetEventSimulationTime)
(
    CW() * self,
    CW(CW_root_Smp_Services, EventId) event,
    CW(CW_root_Smp, Duration) simulationTime
) {
    static_cast<Smp::Services::IScheduler *>(self)->SetEventSimulationTime(
        static_cast<Smp::Services::EventId>(event),
        static_cast<Smp::Duration>(simulationTime)
    );
}

void
CW(SetEventMissionTime)
(
    CW() * self,
    CW(CW_root_Smp_Services, EventId) event,
    CW(CW_root_Smp, Duration) missionTime
) {
    static_cast<Smp::Services::IScheduler *>(self)->SetEventMissionTime(
        static_cast<Smp::Services::EventId>(event),
        static_cast<Smp::Duration>(missionTime)
    );
}

void
CW(SetEventEpochTime)
(
    CW() * self,
    CW(CW_root_Smp_Services, EventId) event,
    CW(CW_root_Smp, DateTime) epochTime
) {
    static_cast<Smp::Services::IScheduler *>(self)->SetEventEpochTime(
        static_cast<Smp::Services::EventId>(event),
        static_cast<Smp::DateTime>(epochTime)
    );
}

void
CW(SetEventZuluTime)
(
    CW() * self,
    CW(CW_root_Smp_Services, EventId) event,
    CW(CW_root_Smp, DateTime) zuluTime
) {
    static_cast<Smp::Services::IScheduler *>(self)->SetEventZuluTime(
        static_cast<Smp::Services::EventId>(event),
        static_cast<Smp::DateTime>(zuluTime)
    );
}

void
CW(SetEventCycleTime)
(
    CW() * self,
    CW(CW_root_Smp_Services, EventId) event,
    CW(CW_root_Smp, Duration) cycleTime
) {
    static_cast<Smp::Services::IScheduler *>(self)->SetEventCycleTime(
        static_cast<Smp::Services::EventId>(event),
        static_cast<Smp::Duration>(cycleTime)
    );
}

void
CW(SetEventRepeat)
(
    CW() * self,
    CW(CW_root_Smp_Services, EventId) event,
    CW(CW_root_Smp, Int64) repeat
) {
    static_cast<Smp::Services::IScheduler *>(self)->SetEventRepeat(
        static_cast<Smp::Services::EventId>(event),
        static_cast<Smp::Int64>(repeat)
    );
}

void
CW(RemoveEvent)
(
    CW() * self,
    CW(CW_root_Smp_Services, EventId) event
) {
    static_cast<Smp::Services::IScheduler *>(self)->RemoveEvent(
        static_cast<Smp::Services::EventId>(event)
    );
}

CW(CW_root_Smp_Services, EventId)
CW(GetCurrentEventId)
(
    CW() * self
) {
    return static_cast<CW(CW_root_Smp_Services, EventId)>(
    static_cast<Smp::Services::IScheduler *>(self)->GetCurrentEventId(
    ));
}

CW(CW_root_Smp, Duration)
CW(GetNextScheduledEventTime)
(
    CW() * self
) {
    return static_cast<CW(CW_root_Smp, Duration)>(
    static_cast<Smp::Services::IScheduler *>(self)->GetNextScheduledEventTime(
    ));
}

CW(CW_root_Smp, Bool)
CW(IsEventScheduled)
(
    CW() * self,
    CW(CW_root_Smp_Services, EventId) eventId
) {
    return static_cast<CW(CW_root_Smp, Bool)>(
    static_cast<Smp::Services::IScheduler *>(self)->IsEventScheduled(
        static_cast<Smp::Services::EventId>(eventId)
    ));
}

/* Error while processing function "IScheduler" at Smp/./Services/IScheduler.h:49:15 (exported to Smp-C/Services/IScheduler.h) : Skipping constructor */

/* Error while processing function "operator=" at Smp/./Services/IScheduler.h:49:15 (exported to Smp-C/Services/IScheduler.h) : Reference type is not supported: IScheduler & */

#undef CW_SPACE


#ifdef __cplusplus
}
#endif /* __cplusplus */
