/**
 * This file was auto-generated by https://github.com/abadiet/CWraPPer/
 */
#ifndef CWRAPPER_ISIMULATOR_H
#define CWRAPPER_ISIMULATOR_H

#include "./CWraPPer.h"

#ifdef __cplusplus
extern "C" {
#endif /* __cplusplus */


#include "Smp-C/DuplicateName.h"
#include "Smp-C/DuplicateUuid.h"
#include "Smp-C/FactoryCollection.h"
#include "Smp-C/FileNotFound.h"
#include "Smp-C/IComposite.h"
#include "Smp-C/InvalidFile.h"
#include "Smp-C/InvalidObjectName.h"
#include "Smp-C/InvalidSimulatorState.h"
#include "Smp-C/InvalidSmpVersion.h"
#include "Smp-C/LibraryLoadingFlag.h"
#include "Smp-C/PrimitiveTypes.h"
#include "Smp-C/SimulatorStateKind.h"
#include "Smp-C/Uuid.h"


/* ### root ### */
#define CW_SPACE CW_root

#undef CW_SPACE


/* ### Smp ### */
#ifndef CW_root_Smp
#define CW_root_Smp CW_BUILD_SPACE(CW_root, Smp)
#endif /* CW_root_Smp */
#define CW_SPACE CW_root_Smp

typedef void CW(IComponent);

typedef void CW(IEntryPoint);

typedef void CW(IFactory);

typedef void CW(IModel);

typedef void CW(IService);

#undef CW_SPACE


/* ### Smp::Publication ### */
#ifndef CW_root_Smp_Publication
#define CW_root_Smp_Publication CW_BUILD_SPACE(CW_root_Smp, Publication)
#endif /* CW_root_Smp_Publication */
#define CW_SPACE CW_root_Smp_Publication

typedef void CW(ITypeRegistry);

#undef CW_SPACE


/* ### Smp::Services ### */
#ifndef CW_root_Smp_Services
#define CW_root_Smp_Services CW_BUILD_SPACE(CW_root_Smp, Services)
#endif /* CW_root_Smp_Services */
#define CW_SPACE CW_root_Smp_Services

typedef void CW(IEventManager);

typedef void CW(ILinkRegistry);

typedef void CW(ILogger);

typedef void CW(IResolver);

typedef void CW(IScheduler);

typedef void CW(ITimeKeeper);

#undef CW_SPACE


/* ### Smp ### */
#ifndef CW_root_Smp
#define CW_root_Smp CW_BUILD_SPACE(CW_root, Smp)
#endif /* CW_root_Smp */
#define CW_SPACE CW_root_Smp

typedef void CW(ISimulator);

#undef CW_SPACE


/* ### Smp::ISimulator ### */
#ifndef CW_root_Smp_ISimulator
#define CW_root_Smp_ISimulator CW_BUILD_SPACE(CW_root_Smp, ISimulator)
#endif /* CW_root_Smp_ISimulator */
#define CW_SPACE CW_root_Smp_ISimulator

void
CW(_ISimulator)
(
    CW() * self
);

void
CW(Initialise)
(
    CW() * self
);

void
CW(Publish)
(
    CW() * self
);

void
CW(Configure)
(
    CW() * self
);

void
CW(Connect)
(
    CW() * self
);

void
CW(Run)
(
    CW() * self
);

void
CW(Hold)
(
    CW() * self,
    CW(CW_root_Smp, Bool) immediate
);

void
CW(Store)
(
    CW() * self,
    CW(CW_root_Smp, String8) filename
);

void
CW(Restore)
(
    CW() * self,
    CW(CW_root_Smp, String8) filename
);

void
CW(Reconnect)
(
    CW() * self,
    CW(CW_root_Smp, IComponent) * root
);

void
CW(Exit)
(
    CW() * self
);

void
CW(Abort)
(
    CW() * self
);

CW(CW_root_Smp, SimulatorStateKind)
CW(GetState)
(
    CW() * self
);

void
CW(AddInitEntryPoint)
(
    CW() * self,
    CW(CW_root_Smp, IEntryPoint) * entryPoint
);

void
CW(AddModel)
(
    CW() * self,
    CW(CW_root_Smp, IModel) * model
);

void
CW(AddService)
(
    CW() * self,
    CW(CW_root_Smp, IService) * service
);

CW(CW_root_Smp, IService) *
CW(GetService)
(
    CW() * self,
    CW(CW_root_Smp, String8) name
);

CW(CW_root_Smp_Services, ILogger) *
CW(GetLogger)
(
    CW() * self
);

CW(CW_root_Smp_Services, ITimeKeeper) *
CW(GetTimeKeeper)
(
    CW() * self
);

CW(CW_root_Smp_Services, IScheduler) *
CW(GetScheduler)
(
    CW() * self
);

CW(CW_root_Smp_Services, IEventManager) *
CW(GetEventManager)
(
    CW() * self
);

CW(CW_root_Smp_Services, IResolver) *
CW(GetResolver)
(
    CW() * self
);

CW(CW_root_Smp_Services, ILinkRegistry) *
CW(GetLinkRegistry)
(
    CW() * self
);

void
CW(RegisterFactory)
(
    CW() * self,
    CW(CW_root_Smp, IFactory) * componentFactory
);

/*
CW(CW_root_Smp, IComponent) *
CW(CreateInstance)
(
    CW() * self,
    CW(CW_root_Smp, Uuid) uuid,
    CW(CW_root_Smp, String8) name,
    CW(CW_root_Smp, String8) description,
    CW(CW_root_Smp, IComposite) * parent
);
*/

/*
CW(CW_root_Smp, IFactory) *
CW(GetFactory)
(
    CW() * self,
    CW(CW_root_Smp, Uuid) uuid
);
*/

const CW(CW_root_Smp, FactoryCollection) *
CW(GetFactories)
(
    CW() * self
);

CW(CW_root_Smp_Publication, ITypeRegistry) *
CW(GetTypeRegistry)
(
    CW() * self
);

void
CW(LoadLibrary)
(
    CW() * self,
    CW(CW_root_Smp, String8) libraryPath,
    CW(CW_root_Smp, LibraryLoadingFlag) flag
);

/* Error while processing function "ISimulator" at Smp/./ISimulator.h:71:11 (exported to Smp-C/ISimulator.h) : Skipping constructor */

/* Error while processing function "operator=" at Smp/./ISimulator.h:71:11 (exported to Smp-C/ISimulator.h) : Reference type is not supported: ISimulator & */

#undef CW_SPACE


#ifdef __cplusplus
}
#endif /* __cplusplus */

#endif /* CWRAPPER_ISIMULATOR_H */
