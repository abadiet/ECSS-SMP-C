/**
 * This file was auto-generated by https://github.com/abadiet/CWraPPer/
 */
#ifndef CWRAPPER_ICOMPONENT_H
#define CWRAPPER_ICOMPONENT_H

#include "./CWraPPer.h"

#ifdef __cplusplus
extern "C" {
#endif /* __cplusplus */


#include "Smp-C/AnySimple.h"
#include "Smp-C/AnySimpleArray.h"
#include "Smp-C/ComponentStateKind.h"
#include "Smp-C/FieldCollection.h"
#include "Smp-C/InvalidArraySize.h"
#include "Smp-C/InvalidArrayValue.h"
#include "Smp-C/InvalidComponentState.h"
#include "Smp-C/InvalidFieldName.h"
#include "Smp-C/InvalidFieldValue.h"
#include "Smp-C/IObject.h"
#include "Smp-C/PrimitiveTypes.h"
#include "Smp-C/Uuid.h"


/* ### root ### */
#define CW_SPACE CW_root

#undef CW_SPACE


/* ### Smp ### */
#ifndef CW_root_Smp
#define CW_root_Smp CW_BUILD_SPACE(CW_root, Smp)
#endif /* CW_root_Smp */
#define CW_SPACE CW_root_Smp

typedef void CW(ICollectionBase);

typedef void CW(IField);

typedef void CW(IPublication);

typedef void CW(ISimulator);

#undef CW_SPACE


/* ### Smp::Services ### */
#ifndef CW_root_Smp_Services
#define CW_root_Smp_Services CW_BUILD_SPACE(CW_root_Smp, Services)
#endif /* CW_root_Smp_Services */
#define CW_SPACE CW_root_Smp_Services

typedef void CW(ILinkRegistry);

typedef void CW(ILogger);

#undef CW_SPACE


/* ### Smp ### */
#ifndef CW_root_Smp
#define CW_root_Smp CW_BUILD_SPACE(CW_root, Smp)
#endif /* CW_root_Smp */
#define CW_SPACE CW_root_Smp

typedef void CW(IComponent);

#undef CW_SPACE


/* ### Smp::IComponent ### */
#ifndef CW_root_Smp_IComponent
#define CW_root_Smp_IComponent CW_BUILD_SPACE(CW_root_Smp, IComponent)
#endif /* CW_root_Smp_IComponent */
#define CW_SPACE CW_root_Smp_IComponent

void
CW(_IComponent)
(
    CW() * self
);

CW(CW_root_Smp, ComponentStateKind)
CW(GetState)
(
    CW() * self
);

void
CW(Publish)
(
    CW() * self,
    CW(CW_root_Smp, IPublication) * receiver
);

void
CW(Configure)
(
    CW() * self,
    CW(CW_root_Smp_Services, ILogger) * logger,
    CW(CW_root_Smp_Services, ILinkRegistry) * linkRegistry
);

void
CW(Connect)
(
    CW() * self,
    CW(CW_root_Smp, ISimulator) * simulator
);

void
CW(Disconnect)
(
    CW() * self
);

CW(CW_root_Smp, IField) *
CW(GetField)
(
    CW() * self,
    CW(CW_root_Smp, String8) fullName
);

const CW(CW_root_Smp, FieldCollection) *
CW(GetFields)
(
    CW() * self
);

/* Error while processing function "GetUuid" at Smp/IComponent.h:159:34 (exported to Smp-C/IComponent.h) : Reference type is not supported: const Smp::Uuid & */

/* Error while processing function "GetSimpleValue" at Smp/IComponent.h:177:32 (exported to Smp-C/IComponent.h) : Skipping function that returns a class/struct */

void
CW(SetSimpleValue)
(
    CW() * self,
    CW(CW_root_Smp, String8) fullName,
    CW(CW_root_Smp, AnySimple) * value
);

void
CW(GetSimpleArrayValue)
(
    CW() * self,
    CW(CW_root_Smp, String8) fullName,
    CW(CW_root_Smp, UInt64) length,
    CW(CW_root_Smp, AnySimple) * values,
    CW(CW_root_Smp, UInt64) startIndex
);

void
CW(SetSimpleArrayValue)
(
    CW() * self,
    CW(CW_root_Smp, String8) fullName,
    CW(CW_root_Smp, UInt64) length,
    CW(CW_root_Smp, AnySimpleArray) values,
    CW(CW_root_Smp, UInt64) startIndex
);

CW(CW_root_Smp, Bool)
CW(AddChild)
(
    CW() * self,
    CW(CW_root_Smp, IObject) * child,
    const CW(CW_root_Smp, ICollectionBase) * collection
);

CW(CW_root_Smp, Bool)
CW(RemoveChild)
(
    CW() * self,
    CW(CW_root_Smp, IObject) * child,
    const CW(CW_root_Smp, ICollectionBase) * collection
);

CW(CW_root_Smp, IObject) *
CW(IsChildInCollection)
(
    CW() * self,
    CW(CW_root_Smp, String8) child,
    const CW(CW_root_Smp, ICollectionBase) * collection
);

/* Error while processing function "IComponent" at Smp/IComponent.h:61:11 (exported to Smp-C/IComponent.h) : Skipping constructor */

/* Error while processing function "operator=" at Smp/IComponent.h:61:11 (exported to Smp-C/IComponent.h) : Reference type is not supported: IComponent & */

#undef CW_SPACE


#ifdef __cplusplus
}
#endif /* __cplusplus */

#endif /* CWRAPPER_ICOMPONENT_H */
