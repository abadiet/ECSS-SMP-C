/**
 * This file was auto-generated by https://github.com/abadiet/CWraPPer/
 */
#ifndef CWRAPPER_ISCHEDULER_H
#define CWRAPPER_ISCHEDULER_H

#include "../CWraPPer.h"

#ifdef __cplusplus
extern "C" {
#endif /* __cplusplus */


#include "Smp-C/IService.h"
#include "Smp-C/PrimitiveTypes.h"
#include "Smp-C/Services/EventId.h"
#include "Smp-C/Services/InvalidCycleTime.h"
#include "Smp-C/Services/InvalidEventId.h"
#include "Smp-C/Services/InvalidEventTime.h"


/* ### root ### */
#define CW_SPACE CW_root

#undef CW_SPACE


/* ### Smp ### */
#ifndef CW_root_Smp
#define CW_root_Smp CW_BUILD_SPACE(CW_root, Smp)
#endif /* CW_root_Smp */
#define CW_SPACE CW_root_Smp

typedef void CW(IEntryPoint);

#undef CW_SPACE


/* ### Smp::Services ### */
#ifndef CW_root_Smp_Services
#define CW_root_Smp_Services CW_BUILD_SPACE(CW_root_Smp, Services)
#endif /* CW_root_Smp_Services */
#define CW_SPACE CW_root_Smp_Services

typedef void CW(IScheduler);

#undef CW_SPACE


/* ### Smp::Services::IScheduler ### */
#ifndef CW_root_Smp_Services_IScheduler
#define CW_root_Smp_Services_IScheduler CW_BUILD_SPACE(CW_root_Smp_Services, IScheduler)
#endif /* CW_root_Smp_Services_IScheduler */
#define CW_SPACE CW_root_Smp_Services_IScheduler

void
CW(_IScheduler)
(
    CW() * self
);

CW(CW_root_Smp_Services, EventId)
CW(AddImmediateEvent)
(
    CW() * self,
    const CW(CW_root_Smp, IEntryPoint) * entryPoint
);

CW(CW_root_Smp_Services, EventId)
CW(AddSimulationTimeEvent)
(
    CW() * self,
    const CW(CW_root_Smp, IEntryPoint) * entryPoint,
    CW(CW_root_Smp, Duration) simulationTime,
    CW(CW_root_Smp, Duration) cycleTime,
    CW(CW_root_Smp, Int64) repeat
);

CW(CW_root_Smp_Services, EventId)
CW(AddMissionTimeEvent)
(
    CW() * self,
    const CW(CW_root_Smp, IEntryPoint) * entryPoint,
    CW(CW_root_Smp, Duration) missionTime,
    CW(CW_root_Smp, Duration) cycleTime,
    CW(CW_root_Smp, Int64) repeat
);

CW(CW_root_Smp_Services, EventId)
CW(AddEpochTimeEvent)
(
    CW() * self,
    const CW(CW_root_Smp, IEntryPoint) * entryPoint,
    CW(CW_root_Smp, DateTime) epochTime,
    CW(CW_root_Smp, Duration) cycleTime,
    CW(CW_root_Smp, Int64) repeat
);

CW(CW_root_Smp_Services, EventId)
CW(AddZuluTimeEvent)
(
    CW() * self,
    const CW(CW_root_Smp, IEntryPoint) * entryPoint,
    CW(CW_root_Smp, DateTime) zuluTime,
    CW(CW_root_Smp, Duration) cycleTime,
    CW(CW_root_Smp, Int64) repeat
);

CW(CW_root_Smp_Services, EventId)
CW(AddRelativeZuluTimeEvent)
(
    CW() * self,
    const CW(CW_root_Smp, IEntryPoint) * entryPoint,
    CW(CW_root_Smp, Duration) zuluTimeDelay,
    CW(CW_root_Smp, Duration) cycleTime,
    CW(CW_root_Smp, Int64) repeat
);

void
CW(SetEventSimulationTime)
(
    CW() * self,
    CW(CW_root_Smp_Services, EventId) event,
    CW(CW_root_Smp, Duration) simulationTime
);

void
CW(SetEventMissionTime)
(
    CW() * self,
    CW(CW_root_Smp_Services, EventId) event,
    CW(CW_root_Smp, Duration) missionTime
);

void
CW(SetEventEpochTime)
(
    CW() * self,
    CW(CW_root_Smp_Services, EventId) event,
    CW(CW_root_Smp, DateTime) epochTime
);

void
CW(SetEventZuluTime)
(
    CW() * self,
    CW(CW_root_Smp_Services, EventId) event,
    CW(CW_root_Smp, DateTime) zuluTime
);

void
CW(SetEventCycleTime)
(
    CW() * self,
    CW(CW_root_Smp_Services, EventId) event,
    CW(CW_root_Smp, Duration) cycleTime
);

void
CW(SetEventRepeat)
(
    CW() * self,
    CW(CW_root_Smp_Services, EventId) event,
    CW(CW_root_Smp, Int64) repeat
);

void
CW(RemoveEvent)
(
    CW() * self,
    CW(CW_root_Smp_Services, EventId) event
);

CW(CW_root_Smp_Services, EventId)
CW(GetCurrentEventId)
(
    CW() * self
);

CW(CW_root_Smp, Duration)
CW(GetNextScheduledEventTime)
(
    CW() * self
);

CW(CW_root_Smp, Bool)
CW(IsEventScheduled)
(
    CW() * self,
    CW(CW_root_Smp_Services, EventId) eventId
);

/* Error while processing function "IScheduler" at Smp/./Services/IScheduler.h:49:15 (exported to Smp-C/Services/IScheduler.h) : Skipping constructor */

/* Error while processing function "operator=" at Smp/./Services/IScheduler.h:49:15 (exported to Smp-C/Services/IScheduler.h) : Reference type is not supported: IScheduler & */

#undef CW_SPACE


#ifdef __cplusplus
}
#endif /* __cplusplus */

#endif /* CWRAPPER_ISCHEDULER_H */
