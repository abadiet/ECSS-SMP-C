/**
 * This file was auto-generated by https://github.com/abadiet/CWraPPer/
 */
#ifndef CWRAPPER_ANYSIMPLE_H
#define CWRAPPER_ANYSIMPLE_H

#include "./CWraPPer.h"

#ifdef __cplusplus
extern "C" {
#endif /* __cplusplus */


#include "Smp-C/PrimitiveTypes.h"
/* #include <iosfwd> */


/* ### root ### */
#define CW_SPACE CW_root

#undef CW_SPACE


/* ### Smp ### */
#ifndef CW_root_Smp
#define CW_root_Smp CW_BUILD_SPACE(CW_root, Smp)
#endif /* CW_root_Smp */
#define CW_SPACE CW_root_Smp

typedef void CW(AnySimple);

#undef CW_SPACE


/* ### Smp::AnySimple ### */
#ifndef CW_root_Smp_AnySimple
#define CW_root_Smp_AnySimple CW_BUILD_SPACE(CW_root_Smp, AnySimple)
#endif /* CW_root_Smp_AnySimple */
#define CW_SPACE CW_root_Smp_AnySimple

/* Error while processing function "AnySimple" at Smp/./AnySimple.h:34:9 (exported to Smp-C/AnySimple.h) : Skipping constructor */

/* Error while processing function "AnySimple" at Smp/./AnySimple.h:38:18 (exported to Smp-C/AnySimple.h) : Skipping constructor */

/* Error while processing function "AnySimple" at Smp/./AnySimple.h:43:9 (exported to Smp-C/AnySimple.h) : Skipping templated function */

/* Error while processing function "AnySimple" at Smp/./AnySimple.h:52:9 (exported to Smp-C/AnySimple.h) : Skipping constructor */

/* Error while processing function "AnySimple" at Smp/./AnySimple.h:57:9 (exported to Smp-C/AnySimple.h) : Skipping constructor */

/* Error while processing function "operator=" at Smp/./AnySimple.h:63:20 (exported to Smp-C/AnySimple.h) : Reference type is not supported: AnySimple & */

/* Error while processing function "operator=" at Smp/./AnySimple.h:69:20 (exported to Smp-C/AnySimple.h) : Reference type is not supported: AnySimple & */

void
CW(_AnySimple)
(
    CW() * self
);

void
CW(SetValueBool)
(
    CW() * self,
    CW(CW_root_Smp, PrimitiveTypeKind) kind,
    CW(CW_root_Smp, Bool) value
);

void
CW(SetValueChar8)
(
    CW() * self,
    CW(CW_root_Smp, PrimitiveTypeKind) kind,
    CW(CW_root_Smp, Char8) value
);

void
CW(SetValueString8)
(
    CW() * self,
    CW(CW_root_Smp, PrimitiveTypeKind) kind,
    CW(CW_root_Smp, String8) value
);

void
CW(SetValueUInt8)
(
    CW() * self,
    CW(CW_root_Smp, PrimitiveTypeKind) kind,
    CW(CW_root_Smp, UInt8) value
);

void
CW(SetValueUInt16)
(
    CW() * self,
    CW(CW_root_Smp, PrimitiveTypeKind) kind,
    CW(CW_root_Smp, UInt16) value
);

void
CW(SetValueUInt32)
(
    CW() * self,
    CW(CW_root_Smp, PrimitiveTypeKind) kind,
    CW(CW_root_Smp, UInt32) value
);

void
CW(SetValueUInt64)
(
    CW() * self,
    CW(CW_root_Smp, PrimitiveTypeKind) kind,
    CW(CW_root_Smp, UInt64) value
);

void
CW(SetValueInt8)
(
    CW() * self,
    CW(CW_root_Smp, PrimitiveTypeKind) kind,
    CW(CW_root_Smp, Int8) value
);

void
CW(SetValueInt16)
(
    CW() * self,
    CW(CW_root_Smp, PrimitiveTypeKind) kind,
    CW(CW_root_Smp, Int16) value
);

void
CW(SetValueInt32)
(
    CW() * self,
    CW(CW_root_Smp, PrimitiveTypeKind) kind,
    CW(CW_root_Smp, Int32) value
);

void
CW(SetValueInt64)
(
    CW() * self,
    CW(CW_root_Smp, PrimitiveTypeKind) kind,
    CW(CW_root_Smp, Int64) value
);

void
CW(SetValueFloat32)
(
    CW() * self,
    CW(CW_root_Smp, PrimitiveTypeKind) kind,
    CW(CW_root_Smp, Float32) value
);

void
CW(SetValueFloat64)
(
    CW() * self,
    CW(CW_root_Smp, PrimitiveTypeKind) kind,
    CW(CW_root_Smp, Float64) value
);

CW(CW_root_Smp, Bool)
CW(operatorBool)
(
    CW() * self
);

CW(CW_root_Smp, Char8)
CW(operatorChar8)
(
    CW() * self
);

CW(CW_root_Smp, String8)
CW(operatorString8)
(
    CW() * self
);

CW(CW_root_Smp, UInt8)
CW(operatorUInt8)
(
    CW() * self
);

CW(CW_root_Smp, UInt16)
CW(operatorUInt16)
(
    CW() * self
);

CW(CW_root_Smp, UInt32)
CW(operatorUInt32)
(
    CW() * self
);

CW(CW_root_Smp, UInt64)
CW(operatorUInt64)
(
    CW() * self
);

CW(CW_root_Smp, Int8)
CW(operatorInt8)
(
    CW() * self
);

CW(CW_root_Smp, Int16)
CW(operatorInt16)
(
    CW() * self
);

CW(CW_root_Smp, Int32)
CW(operatorInt32)
(
    CW() * self
);

CW(CW_root_Smp, Int64)
CW(operatorInt64)
(
    CW() * self
);

CW(CW_root_Smp, Float32)
CW(operatorFloat32)
(
    CW() * self
);

CW(CW_root_Smp, Float64)
CW(operatorFloat64)
(
    CW() * self
);

CW(CW_root_Smp, String8)
CW(MoveString)
(
    CW() * self
);

CW(CW_root_Smp, PrimitiveTypeKind)
CW(GetType)
(
    CW() * self
);

/* Error while processing function "operator==" at Smp/./AnySimple.h:216:14 (exported to Smp-C/AnySimple.h) : Reference type is not supported: const Smp::AnySimple & */

/* Error while processing function "operator!=" at Smp/./AnySimple.h:222:14 (exported to Smp-C/AnySimple.h) : Reference type is not supported: const Smp::AnySimple & */

typedef void CW(PrimitiveTypeValue);

#undef CW_SPACE


/* ### Smp ### */
#ifndef CW_root_Smp
#define CW_root_Smp CW_BUILD_SPACE(CW_root, Smp)
#endif /* CW_root_Smp */
#define CW_SPACE CW_root_Smp

/* Error while processing function "operator<<" at Smp/./AnySimple.h:285:19 (exported to Smp-C/AnySimple.h) : Reference type is not supported: std::ostream & */

#undef CW_SPACE


#ifdef __cplusplus
}
#endif /* __cplusplus */

#endif /* CWRAPPER_ANYSIMPLE_H */
