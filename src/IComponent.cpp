/**
 * This file was auto-generated by https://github.com/abadiet/CWraPPer/
 */
#include "Smp-C/IComponent.h"
#include <Smp/IComponent.h>

#ifdef __cplusplus
extern "C" {
#endif /* __cplusplus */


/* ### root ### */
#define CW_SPACE CW_root

#undef CW_SPACE


/* ### Smp ### */
#define CW_SPACE CW_root_Smp

#undef CW_SPACE


/* ### Smp::Services ### */
#define CW_SPACE CW_root_Smp_Services

#undef CW_SPACE


/* ### Smp ### */
#define CW_SPACE CW_root_Smp

#undef CW_SPACE


/* ### Smp::IComponent ### */
#define CW_SPACE CW_root_Smp_IComponent

void
CW(_IComponent)
(
    CW() * self
) {
    static_cast<Smp::IComponent *>(self)->~IComponent(
    );
}

CW(CW_root_Smp, ComponentStateKind)
CW(GetState)
(
    CW() * self
) {
    return static_cast<CW(CW_root_Smp, ComponentStateKind)>(
    static_cast<Smp::IComponent *>(self)->GetState(
    ));
}

void
CW(Publish)
(
    CW() * self,
    CW(CW_root_Smp, IPublication) * receiver
) {
    static_cast<Smp::IComponent *>(self)->Publish(
        static_cast<Smp::IPublication *>(receiver)
    );
}

void
CW(Configure)
(
    CW() * self,
    CW(CW_root_Smp_Services, ILogger) * logger,
    CW(CW_root_Smp_Services, ILinkRegistry) * linkRegistry
) {
    static_cast<Smp::IComponent *>(self)->Configure(
        static_cast<Smp::Services::ILogger *>(logger),
        static_cast<Smp::Services::ILinkRegistry *>(linkRegistry)
    );
}

void
CW(Connect)
(
    CW() * self,
    CW(CW_root_Smp, ISimulator) * simulator
) {
    static_cast<Smp::IComponent *>(self)->Connect(
        static_cast<Smp::ISimulator *>(simulator)
    );
}

void
CW(Disconnect)
(
    CW() * self
) {
    static_cast<Smp::IComponent *>(self)->Disconnect(
    );
}

CW(CW_root_Smp, IField) *
CW(GetField)
(
    CW() * self,
    CW(CW_root_Smp, String8) fullName
) {
    return static_cast<CW(CW_root_Smp, IField) *>(
    static_cast<Smp::IComponent *>(self)->GetField(
        static_cast<Smp::String8>(fullName)
    ));
}

const CW(CW_root_Smp, FieldCollection) *
CW(GetFields)
(
    CW() * self
) {
    return static_cast<const CW(CW_root_Smp, FieldCollection) *>(
    static_cast<Smp::IComponent *>(self)->GetFields(
    ));
}

/* Error while processing function "GetUuid" at Smp/IComponent.h:159:34 (exported to Smp-C/IComponent.h) : Reference type is not supported: const Smp::Uuid & */

/* Error while processing function "GetSimpleValue" at Smp/IComponent.h:177:32 (exported to Smp-C/IComponent.h) : Skipping function that returns a class/struct */

void
CW(SetSimpleValue)
(
    CW() * self,
    CW(CW_root_Smp, String8) fullName,
    CW(CW_root_Smp, AnySimple) * value
) {
    static_cast<Smp::IComponent *>(self)->SetSimpleValue(
        static_cast<Smp::String8>(fullName),
        *static_cast<Smp::AnySimple*>(value)
    );
}

void
CW(GetSimpleArrayValue)
(
    CW() * self,
    CW(CW_root_Smp, String8) fullName,
    CW(CW_root_Smp, UInt64) length,
    CW(CW_root_Smp, AnySimple) * values,
    CW(CW_root_Smp, UInt64) startIndex
) {
    static_cast<Smp::IComponent *>(self)->GetSimpleArrayValue(
        static_cast<Smp::String8>(fullName),
        static_cast<Smp::UInt64>(length),
        static_cast<Smp::AnySimple *>(values),
        static_cast<Smp::UInt64>(startIndex)
    );
}

void
CW(SetSimpleArrayValue)
(
    CW() * self,
    CW(CW_root_Smp, String8) fullName,
    CW(CW_root_Smp, UInt64) length,
    CW(CW_root_Smp, AnySimpleArray) values,
    CW(CW_root_Smp, UInt64) startIndex
) {
    static_cast<Smp::IComponent *>(self)->SetSimpleArrayValue(
        static_cast<Smp::String8>(fullName),
        static_cast<Smp::UInt64>(length),
        static_cast<Smp::AnySimpleArray>(values),
        static_cast<Smp::UInt64>(startIndex)
    );
}

CW(CW_root_Smp, Bool)
CW(AddChild)
(
    CW() * self,
    CW(CW_root_Smp, IObject) * child,
    const CW(CW_root_Smp, ICollectionBase) * collection
) {
    return static_cast<CW(CW_root_Smp, Bool)>(
    static_cast<Smp::IComponent *>(self)->AddChild(
        static_cast<Smp::IObject *>(child),
        static_cast<const Smp::ICollectionBase *>(collection)
    ));
}

CW(CW_root_Smp, Bool)
CW(RemoveChild)
(
    CW() * self,
    CW(CW_root_Smp, IObject) * child,
    const CW(CW_root_Smp, ICollectionBase) * collection
) {
    return static_cast<CW(CW_root_Smp, Bool)>(
    static_cast<Smp::IComponent *>(self)->RemoveChild(
        static_cast<Smp::IObject *>(child),
        static_cast<const Smp::ICollectionBase *>(collection)
    ));
}

CW(CW_root_Smp, IObject) *
CW(IsChildInCollection)
(
    CW() * self,
    CW(CW_root_Smp, String8) child,
    const CW(CW_root_Smp, ICollectionBase) * collection
) {
    return static_cast<CW(CW_root_Smp, IObject) *>(
    static_cast<Smp::IComponent *>(self)->IsChildInCollection(
        static_cast<Smp::String8>(child),
        static_cast<const Smp::ICollectionBase *>(collection)
    ));
}

/* Error while processing function "IComponent" at Smp/IComponent.h:61:11 (exported to Smp-C/IComponent.h) : Skipping constructor */

/* Error while processing function "operator=" at Smp/IComponent.h:61:11 (exported to Smp-C/IComponent.h) : Reference type is not supported: IComponent & */

#undef CW_SPACE


#ifdef __cplusplus
}
#endif /* __cplusplus */
