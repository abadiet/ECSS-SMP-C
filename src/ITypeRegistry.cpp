/**
 * This file was auto-generated by https://github.com/abadiet/CWraPPer/
 */
#include "Smp-C/Publication/ITypeRegistry.h"
#include <Smp/Publication/ITypeRegistry.h>

#ifdef __cplusplus
extern "C" {
#endif /* __cplusplus */


/* ### root ### */
#define CW_SPACE CW_root

#undef CW_SPACE


/* ### Smp ### */
#define CW_SPACE CW_root_Smp

#undef CW_SPACE


/* ### Smp::Publication ### */
#define CW_SPACE CW_root_Smp_Publication

#undef CW_SPACE


/* ### Smp::Publication::ITypeRegistry ### */
#define CW_SPACE CW_root_Smp_Publication_ITypeRegistry

void
CW(_ITypeRegistry)
(
    CW() * self
) {
    static_cast<Smp::Publication::ITypeRegistry *>(self)->~ITypeRegistry(
    );
}

CW(CW_root_Smp_Publication, IType) *
CW(GetTypePrimitiveTypeKind)
(
    CW() * self,
    CW(CW_root_Smp, PrimitiveTypeKind) type
) {
    return static_cast<CW(CW_root_Smp_Publication, IType) *>(
    static_cast<Smp::Publication::ITypeRegistry *>(self)->GetType(
        static_cast<Smp::PrimitiveTypeKind>(type)
    ));
}

CW(CW_root_Smp_Publication, IType) *
CW(GetTypeUuid)
(
    CW() * self,
    CW(CW_root_Smp, Uuid) * typeUuid
) {
    return static_cast<CW(CW_root_Smp_Publication, IType) *>(
    static_cast<Smp::Publication::ITypeRegistry *>(self)->GetType(
        *static_cast<Smp::Uuid*>(typeUuid)
    ));
}

CW(CW_root_Smp_Publication, IType) *
CW(AddFloatType)
(
    CW() * self,
    CW(CW_root_Smp, String8) name,
    CW(CW_root_Smp, String8) description,
    CW(CW_root_Smp, Uuid) * typeUuid,
    CW(CW_root_Smp, Float64) minimum,
    CW(CW_root_Smp, Float64) maximum,
    CW(CW_root_Smp, Bool) minInclusive,
    CW(CW_root_Smp, Bool) maxInclusive,
    CW(CW_root_Smp, String8) unit,
    CW(CW_root_Smp, PrimitiveTypeKind) type
) {
    return static_cast<CW(CW_root_Smp_Publication, IType) *>(
    static_cast<Smp::Publication::ITypeRegistry *>(self)->AddFloatType(
        static_cast<Smp::String8>(name),
        static_cast<Smp::String8>(description),
        *static_cast<Smp::Uuid*>(typeUuid),
        static_cast<Smp::Float64>(minimum),
        static_cast<Smp::Float64>(maximum),
        static_cast<Smp::Bool>(minInclusive),
        static_cast<Smp::Bool>(maxInclusive),
        static_cast<Smp::String8>(unit),
        static_cast<Smp::PrimitiveTypeKind>(type)
    ));
}

CW(CW_root_Smp_Publication, IType) *
CW(AddIntegerType)
(
    CW() * self,
    CW(CW_root_Smp, String8) name,
    CW(CW_root_Smp, String8) description,
    CW(CW_root_Smp, Uuid) * typeUuid,
    CW(CW_root_Smp, Int64) minimum,
    CW(CW_root_Smp, Int64) maximum,
    CW(CW_root_Smp, String8) unit,
    CW(CW_root_Smp, PrimitiveTypeKind) type
) {
    return static_cast<CW(CW_root_Smp_Publication, IType) *>(
    static_cast<Smp::Publication::ITypeRegistry *>(self)->AddIntegerType(
        static_cast<Smp::String8>(name),
        static_cast<Smp::String8>(description),
        *static_cast<Smp::Uuid*>(typeUuid),
        static_cast<Smp::Int64>(minimum),
        static_cast<Smp::Int64>(maximum),
        static_cast<Smp::String8>(unit),
        static_cast<Smp::PrimitiveTypeKind>(type)
    ));
}

CW(CW_root_Smp_Publication, IEnumerationType) *
CW(AddEnumerationType)
(
    CW() * self,
    CW(CW_root_Smp, String8) name,
    CW(CW_root_Smp, String8) description,
    CW(CW_root_Smp, Uuid) * typeUuid
) {
    return static_cast<CW(CW_root_Smp_Publication, IEnumerationType) *>(
    static_cast<Smp::Publication::ITypeRegistry *>(self)->AddEnumerationType(
        static_cast<Smp::String8>(name),
        static_cast<Smp::String8>(description),
        *static_cast<Smp::Uuid*>(typeUuid)
    ));
}

CW(CW_root_Smp_Publication, IArrayType) *
CW(AddArrayType)
(
    CW() * self,
    CW(CW_root_Smp, String8) name,
    CW(CW_root_Smp, String8) description,
    CW(CW_root_Smp, Uuid) * typeUuid,
    CW(CW_root_Smp, Uuid) * itemTypeUuid,
    CW(CW_root_Smp, UInt64) itemSize,
    CW(CW_root_Smp, UInt64) arrayCount,
    CW(CW_root_Smp, Bool) simpleArray
) {
    return static_cast<CW(CW_root_Smp_Publication, IArrayType) *>(
    static_cast<Smp::Publication::ITypeRegistry *>(self)->AddArrayType(
        static_cast<Smp::String8>(name),
        static_cast<Smp::String8>(description),
        *static_cast<Smp::Uuid*>(typeUuid),
        *static_cast<Smp::Uuid*>(itemTypeUuid),
        static_cast<Smp::UInt64>(itemSize),
        static_cast<Smp::UInt64>(arrayCount),
        static_cast<Smp::Bool>(simpleArray)
    ));
}

CW(CW_root_Smp_Publication, IStringType) *
CW(AddStringType)
(
    CW() * self,
    CW(CW_root_Smp, String8) name,
    CW(CW_root_Smp, String8) description,
    CW(CW_root_Smp, Uuid) * typeUuid,
    CW(CW_root_Smp, UInt64) length
) {
    return static_cast<CW(CW_root_Smp_Publication, IStringType) *>(
    static_cast<Smp::Publication::ITypeRegistry *>(self)->AddStringType(
        static_cast<Smp::String8>(name),
        static_cast<Smp::String8>(description),
        *static_cast<Smp::Uuid*>(typeUuid),
        static_cast<Smp::UInt64>(length)
    ));
}

CW(CW_root_Smp_Publication, IStructureType) *
CW(AddStructureType)
(
    CW() * self,
    CW(CW_root_Smp, String8) name,
    CW(CW_root_Smp, String8) description,
    CW(CW_root_Smp, Uuid) * typeUuid
) {
    return static_cast<CW(CW_root_Smp_Publication, IStructureType) *>(
    static_cast<Smp::Publication::ITypeRegistry *>(self)->AddStructureType(
        static_cast<Smp::String8>(name),
        static_cast<Smp::String8>(description),
        *static_cast<Smp::Uuid*>(typeUuid)
    ));
}

CW(CW_root_Smp_Publication, IClassType) *
CW(AddClassType)
(
    CW() * self,
    CW(CW_root_Smp, String8) name,
    CW(CW_root_Smp, String8) description,
    CW(CW_root_Smp, Uuid) * typeUuid,
    CW(CW_root_Smp, Uuid) * baseClassUuid
) {
    return static_cast<CW(CW_root_Smp_Publication, IClassType) *>(
    static_cast<Smp::Publication::ITypeRegistry *>(self)->AddClassType(
        static_cast<Smp::String8>(name),
        static_cast<Smp::String8>(description),
        *static_cast<Smp::Uuid*>(typeUuid),
        *static_cast<Smp::Uuid*>(baseClassUuid)
    ));
}

/* Error while processing function "operator=" at Smp/./Publication/ITypeRegistry.h:62:15 (exported to Smp-C/Publication/ITypeRegistry.h) : Reference type is not supported: ITypeRegistry & */

#undef CW_SPACE


#ifdef __cplusplus
}
#endif /* __cplusplus */
